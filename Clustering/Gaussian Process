This file includes Gaussian Process and its visualization.

import matplotlib.pyplot as plt
from scipy.optimize import minimize
from scipy.spatial.distance import cdist
import numpy as np

# Constants
input_data = np.loadtxt('/Users/dongwenou/Downloads/ML_files/input.data')
beta = 5  # Precision of noise
X = input_data[:, 0].reshape(-1, 1)  # Input features
Y = input_data[:, 1].reshape(-1, 1)  # Output features

#reshape is to let the X and Y respectively be a 2-dimensional array like (?,1) 
print(input_data)

# Define the Rational Quadratic Kernel function
def rational_quadratic_kernel(x1, x2, length_scale=1.0, alpha=1.0):
    """ Compute the rational quadratic kernel matrix between x1 and x2 """
    distances = cdist(x1, x2, 'sqeuclidean') #cdist calculates the L2-norm of (x1 - x2)
    return (1 + distances / (2 * alpha * length_scale ** 2)) ** (-alpha)


# Gaussian Process Regression function
def gaussian_process_regression(X_train, Y_train, X_pred, kernel_func, kernel_params):
    """ Implement Gaussian Process Regression """
    
    # Compute the kernel matrices
    K = kernel_func(X_train, X_train, **kernel_params)
    K_y = K + np.eye(len(X_train)) / beta  
    K_star = kernel_func(X_train, X_pred, **kernel_params) 
    K_stars = kernel_func(X_pred, X_pred, **kernel_params) + np.eye(len(X_pred))/beta
    
    # Calculate the mean and covariance of the predictive distribution
    K_y_inv = np.linalg.inv(K_y)
    mu_s = K_star.T.dot(K_y_inv).dot(Y_train)
    cov_s = K_stars - K_star.T.dot(K_y_inv).dot(K_star)
    
    return mu_s.flatten(), np.sqrt(np.diag(cov_s))


# Prepare prediction inputs
X_pred = np.linspace(-60, 60, 300).reshape(-1, 1)  # X used for prediction

# Initial kernel parameters
initial_params = {'length_scale': 1.0, 'alpha': 1.0} 

# Predict using initial parameters
mu, std = gaussian_process_regression(X, Y, X_pred, rational_quadratic_kernel, initial_params)

# Visualization
plt.figure(figsize=(10, 6))
plt.scatter(X, Y, c='red', label='Training data')
plt.plot(X_pred, mu, 'b-', label='Mean of f')
plt.fill_between(X_pred.flatten(), mu-1.96*std, mu+1.96*std, alpha=0.2, color='blue', label='95% Confidence Interval')
plt.title('Gaussian Process Regression with Rational Quadratic Kernel')
plt.xlabel('X')
plt.ylabel('f(X)')
plt.legend()
plt.show()
