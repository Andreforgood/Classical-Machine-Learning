def logistic_regression_newton(mx1,my1,vx1,vy1,mx2,my2,vx2,vy2, num_points, epochs=20000):
    
    x1 = normal_dist_generator(mx1,vx1,num_points)
    y1 = normal_dist_generator(my1,vy1,num_points)
    x2 = normal_dist_generator(mx2,vx2,num_points)
    y2 = normal_dist_generator(my2,vy2,num_points)
    
    # Combine into a single dataset
    X = np.vstack((np.column_stack((x1, y1)), np.column_stack((x2, y2))))
    y = np.array([0]*num_points + [1]*num_points)  # Class labels: 0 for class 1, 1 for class 2
    # Add intercept term to X
    X = np.hstack((np.ones((X.shape[0], 1)), X)) #水平堆叠数组
    
    weights = np.zeros(X.shape[1])
    for i in range(epochs):
        predictions = 1 / (1 + np.exp(-np.dot(X, weights)))
        errors = predictions - y
        gradient = np.dot(X.T, errors) 
        H = np.dot(X.T, np.dot(np.diag(predictions * (1 - predictions)), X))
        weights -= np.linalg.inv(H).dot(gradient)
    
    plot_decision_boundary(X, y, weights)
    return weights, X, y

w, X, y = logistic_regression_newton(1,1,2,2,10,10,2,2,50)
print(w)
